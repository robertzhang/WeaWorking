package com.data.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.data.greendao.Task;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TASK.
*/
public class TaskDao extends AbstractDao<Task, Long> {

    public static final String TABLENAME = "TASK";

    /**
     * Properties of entity Task.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Due_at = new Property(2, String.class, "due_at", false, "DUE_AT");
        public final static Property State = new Property(3, String.class, "state", false, "STATE");
        public final static Property User_id = new Property(4, Integer.class, "user_id", false, "USER_ID");
        public final static Property Assigned_user_id = new Property(5, Integer.class, "assigned_user_id", false, "ASSIGNED_USER_ID");
        public final static Property Channel_id = new Property(6, Integer.class, "channel_id", false, "CHANNEL_ID");
        public final static Property Do_at = new Property(7, String.class, "do_at", false, "DO_AT");
        public final static Property Done_at = new Property(8, String.class, "done_at", false, "DONE_AT");
        public final static Property Created_at = new Property(9, String.class, "created_at", false, "CREATED_AT");
    };


    public TaskDao(DaoConfig config) {
        super(config);
    }
    
    public TaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TASK' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TITLE' TEXT," + // 1: title
                "'DUE_AT' TEXT," + // 2: due_at
                "'STATE' TEXT," + // 3: state
                "'USER_ID' INTEGER," + // 4: user_id
                "'ASSIGNED_USER_ID' INTEGER," + // 5: assigned_user_id
                "'CHANNEL_ID' INTEGER," + // 6: channel_id
                "'DO_AT' TEXT," + // 7: do_at
                "'DONE_AT' TEXT," + // 8: done_at
                "'CREATED_AT' TEXT);"); // 9: created_at
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TASK'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Task entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String due_at = entity.getDue_at();
        if (due_at != null) {
            stmt.bindString(3, due_at);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(4, state);
        }
 
        Integer user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(5, user_id);
        }
 
        Integer assigned_user_id = entity.getAssigned_user_id();
        if (assigned_user_id != null) {
            stmt.bindLong(6, assigned_user_id);
        }
 
        Integer channel_id = entity.getChannel_id();
        if (channel_id != null) {
            stmt.bindLong(7, channel_id);
        }
 
        String do_at = entity.getDo_at();
        if (do_at != null) {
            stmt.bindString(8, do_at);
        }
 
        String done_at = entity.getDone_at();
        if (done_at != null) {
            stmt.bindString(9, done_at);
        }
 
        String created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindString(10, created_at);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Task readEntity(Cursor cursor, int offset) {
        Task entity = new Task( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // due_at
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // state
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // user_id
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // assigned_user_id
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // channel_id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // do_at
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // done_at
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // created_at
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Task entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDue_at(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setState(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUser_id(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setAssigned_user_id(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setChannel_id(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setDo_at(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDone_at(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreated_at(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Task entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Task entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
